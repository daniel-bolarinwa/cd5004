/** Class used to execute Emergency Call Centre logic
 *  @author Daniel Bolarinwa
 */

import java.util.concurrent.CopyOnWriteArrayList;

public class Main {
    // declaring global emergencylist in order to work from a single source of truth  
    static EmergencyList emergencies = new EmergencyList();
    public static void main(String[] args) {          
        //retrieve existing data to keep track of system state information
        retrieveExistingEmergencyData();
        int option;
        do {
            System.out.println();
            System.out.println("<-*-*-*-*-MENU-*-*-*-*->");
            System.out.println();
            System.out.println("1. Record Emergency");
            System.out.println("2. Update Emergency details");
            System.out.println("3. Archive Resolved Emergencies");
            System.out.println("4. Generate Reports");
            System.out.println("5. Save and Quit");
            System.out.println();
            System.out.print("Please enter choice (1-5): ");
            option = EasyScanner.nextInt();
            System.out.println();

            switch (option) {
                case 1:
                    recordEmergency();
                    break;
                case 2:
                    updateEmergency();
                    break;
                case 3:
                    archiveResolvedEmergencies();
                    break;
                case 4:
                    generateReport();
                    break;
                case 5:
                    saveAndQuit();
                    break;
                default:
                    System.out.println("\nPlease enter 1-5 only!");
            }
        } while (option != 5);
    }

    /** Records details of an emergency and adds that to the global emergency list
     */
    static void recordEmergency() {
        int emergencyId = setEmergencyId();
        System.out.println("Hi, emergency services! What emergency service do you need?");
        System.out.println("<---Please choose enter (1-3) for one the following---> \n1. Fire Brigade \n2. Police \n3. Ambulance");
        int serviceOption = EasyScanner.nextInt();
        if (serviceOption > 3 || serviceOption < 1) {
            System.out.println("Please try again: the value which was specified is invalid!");
            return;
        }

        System.out.println("\n<---Please provide your personal details below--->");
        System.out.println("Enter full name: ");
        String name = EasyScanner.nextString();
        while (!name.matches("[a-zA-Z\\s]+")) { // validate that only alphabets are in the name
            System.out.println("Name can only contain alpabetical characters. Please try again.");
            name = EasyScanner.nextString();
        };
        
        System.out.println("\nEnter age: ");
        int age = EasyScanner.nextInt();
        while (age <= 0 || age >= 150) {
            System.out.println("Age must be greater than 0 and less than 150! Please try again.");
            age = EasyScanner.nextInt();
        }

        System.out.println("\nEnter phone number: ");
        String phoneNumber = EasyScanner.nextString();
        while (phoneNumber.length() != 11 || !phoneNumber.matches("[0-9]+")) { // validate that only numbers are in the phone number
            System.out.println("Phone number must have a length of 11! Please try again entering 11 digits.");
            phoneNumber = EasyScanner.nextString();
        }

        System.out.println("\n<---Please provide details of the emergency below--->");
        System.out.println("Enter brief description: ");
        String desc = EasyScanner.nextString();

        System.out.println("\nEnter location of incident -> (just the postcode): ");
        String location = EasyScanner.nextString();
        while (!location.matches("[a-zA-Z0-9\\s]+")) { // validate that only alphanumerics are in the location postcode
            System.out.println("Location can only contain alphanumeric characters. Please try again.");
            location = EasyScanner.nextString();
        }

        recordEmergencyCallInformation(serviceOption, name, age, phoneNumber, desc, location, emergencyId);
    }

    /** Receives the service option, caller name, age and phone number
     *  It also takes in description and location of the emergency plus the autogenerated emergency id
     *  These are then used to create caller and emergency onjects which are then combined and added to the global emergency list we declared above
     *  This also implicitly saves the records for permanent retrieval in a csv file in case the system crashes mid operation
     *  @param serviceIn
     *  @param nameIn
     *  @param ageIn
     *  @param phoneNumberIn
     *  @param descIn
     *  @param locationIn
     *  @param emergencyIdIn
     */
    static void recordEmergencyCallInformation(int serviceIn, String nameIn, int ageIn, String phoneNumberIn, String descIn, String locationIn, int emergencyIdIn) {
        Caller caller = new Caller(nameIn, ageIn, phoneNumberIn);
        Emergency emergency = new Emergency(emergencyIdIn, descIn, locationIn);
        emergency.setCallerDetails(caller);
        switch (serviceIn) {
            case 1:
                emergency.fireBrigade = true;
                break;
            case 2:
                emergency.police = true;
                break;
            case 3:
                emergency.ambulance = true;
                break;
        }
        addEmergencyToList(emergency);

        System.out.println("Emergency recorded");
        FileManager.writeToFile("Emergencies.csv", emergencies);
    }

    /** Updates emergencies only if there are emergencies recorded in the system to begin with
     */
    static void updateEmergency() {
        if (emergencies.emergencyList.size() > 0) {
            System.out.println("<---Please specify the id of the emergency you would like to update--->\n");
            // Display all emergencies
            displayheaders();
            emergencies.displayAllEmergencies();
            int id = EasyScanner.nextInt();

            Emergency emergencyToUpdate = emergencies.getEmergencyByID(id);
            System.out.println("\n<---Please choose what you would like to update about the emergency by entering (1-6) for one the following--->\n1. Required Services \n2. Description \n3. Location \n4. Caller Details \n5. Status \n6. Return to main menu");

            int secondOption = EasyScanner.nextInt();
            switch (secondOption) {
            case 1:
                System.out.println("\n<---Please enter (1-3) for the service you would like to add to the emergency---> \n1. Fire Brigade \n2. Police \n3. Ambulance");
                int serviceToAdd = EasyScanner.nextInt();
                if (serviceToAdd > 3 || serviceToAdd < 1) {
                    System.out.println("Please try again: the value which was specified is invalid!");
                    return;
                }
                addExtraServices(serviceToAdd, emergencyToUpdate);
                return;
            case 2:
                System.out.println("\n<---Enter new description: --->");
                String descriptionToUpdate = EasyScanner.nextString();
                try {
                    emergencyToUpdate.setDescription(descriptionToUpdate);
                } catch (NullPointerException e) {
                    System.out.println("The emergency id you have specified doesn't exist please try again entering a valid id!");
                    return;
                }
                break;
            case 3:
                System.out.println("\n<---Enter new location: --->");
                String locationToUpdate = EasyScanner.nextString();
                while (!locationToUpdate.matches("[a-zA-Z0-9\\s]+")) {
                    System.out.println("Location can only contain alphanumeric characters. Please try again.");
                    locationToUpdate = EasyScanner.nextString();
                }
                try {
                    emergencyToUpdate.setLocation(locationToUpdate);
                } catch (NullPointerException e) {
                    System.out.println("The emergency id you have specified doesn't exist please try again entering a valid id!");
                    return;
                }                    
                break;
            case 4:
                System.out.println("\n<---Please provide updated Caller details--->");

                System.out.println("\n<---Enter Caller full name: --->");
                String callerFullNameToUpdate = EasyScanner.nextString();
                while (!callerFullNameToUpdate.matches("[a-zA-Z\\s]+")) {
                    System.out.println("Name can only contain alpabetical characters. Please try again.");
                    callerFullNameToUpdate = EasyScanner.nextString();
                }

                System.out.println("\n<---Enter Caller age: --->");
                int callerAgeToUpdate = EasyScanner.nextInt();
                while (callerAgeToUpdate <= 0 || callerAgeToUpdate >= 150) {
                    System.out.println("Age must be greater than 0 and less than 150! Please try again.");
                    callerAgeToUpdate = EasyScanner.nextInt();
                }

                System.out.println("\n<---Enter Caller phone number: --->");
                String callerPhoneNumberToUpdate = EasyScanner.nextString();
                while (callerPhoneNumberToUpdate.length() != 11 || !callerPhoneNumberToUpdate.matches("[0-9]+")) {
                    System.out.println("Phone number must have a length of 11! Please try again entering 11 digits.");
                    callerPhoneNumberToUpdate = EasyScanner.nextString();
                }

                Caller caller = new Caller(callerFullNameToUpdate, callerAgeToUpdate, callerPhoneNumberToUpdate);
                try {
                    emergencyToUpdate.setCallerDetails(caller);
                } catch (NullPointerException e) {
                    System.out.println("The emergency id you have specified doesn't exist please try again entering a valid id!");
                    return;
                }                    
                break;
            case 5:
                System.out.println("\n<---Please choose the status to set by entering 1 or 2 ---> \n1. PENDING \n2. RESOLVED");
                int statusOption = EasyScanner.nextInt();
                try {
                    if (statusOption == 1) {
                        emergencyToUpdate.status = Emergency.Status.PENDING;
                    } else if (statusOption == 2) {
                        emergencyToUpdate.status = Emergency.Status.RESOLVED;
                    } else {
                        System.out.println("The value you have enter is invalid please try again later entering 1 or 2!");
                        return;
                    }
                } catch (NullPointerException e) {
                    System.out.println("The emergency id you have specified doesn't exist please try again entering a valid id!");
                    return;
                }                    
                break;
            case 6:
                System.out.println("\nreturning to main menu...");
                return;
            default:
                System.out.println("Please try again: the choice which was specified is invalid! Enter 1-6 only");
                return;
            }

            System.out.println("Emergency updated");
            FileManager.writeToFile("Emergencies.csv", emergencies);
            return;
        }

        System.out.println("There are currently no emergencies in the system! Please record an emergency first.");
    }

    /** Archiving emergencies that have a status of 'RESOLVED'
     *  This iterates through the whole list of emergencies
     *  It checks if the status of the emergencies are 'RESOLVED'
     *  It them removes those that pass the condition from our gloabal emegency list
     *  This also implicitly saves the updates for permanent retrieval in a csv file in case the system crashes mid operation
     */
    static void archiveResolvedEmergencies() {
        for(Emergency emergency: emergencies.emergencyList) {
            if (emergency.status == Emergency.Status.RESOLVED) {
                emergencies.emergencyList.remove(emergency);
            }
        }

        System.out.println("All emergencies which were in 'RESOLVED' status have now been archived");
        FileManager.writeToFile("Emergencies.csv", emergencies);
    }

    /** This generates reports for the emergencies within the system 
     *  Can be filtered by Service and Status
     *  It ensures that reports are only generated when emergencies have already been recorded 
     *  to avoid blank report generation
     */
    static void generateReport() {
        if (emergencies.emergencyList.size() > 0) {
            System.out.println("\n<---Please choose how you would like to generate your report by entering (1-4) for any of the following--->");
            System.out.println("1. View all emergencies");
            System.out.println("2. View Emergencies by service");
            System.out.println("3. View Emergencies by status");
            System.out.println("4. Return to main menu");
            int reportOption = EasyScanner.nextInt();
            CopyOnWriteArrayList<Emergency> tempEmergencyList = new CopyOnWriteArrayList<Emergency>();

            switch (reportOption) {
            case 1:
                System.out.println("\nLoading all emergencies...");
                displayheaders();
                for (Emergency emergency: emergencies.emergencyList) {
                    emergency.displayEmergencyDetails();
                }
                break;
            case 2:
                System.out.println("\nLoading emergencies by service...");
                System.out.println("<---Please choose the service you would like to filter for by entering (1-3)---> \n1. Fire Brigade \n2. Police \n3. Ambulance");
                int serviceOption = EasyScanner.nextInt();
                tempEmergencyList = filterByService(serviceOption);

                if (tempEmergencyList.size() == 0) {
                    System.out.println("No emergencies found for the specified status. Please try again!");
                } else {
                    displayheaders();
                    for (Emergency tempEmergency: tempEmergencyList) {
                        tempEmergency.displayEmergencyDetails();
                    }
                }
                break;
            case 3:
                System.out.println("\nLoading emergencies by status...");
                System.out.println("<---Please choose one of the following---> \n1. PENDING \n2. RESOLVED");
                int statusOption = EasyScanner.nextInt();
                for (Emergency emergency: emergencies.emergencyList) { //iterates through all emergencies to check if any emergency's status matches the user input then it adds that emergency to temp list to be displayed
                    if (statusOption == 1) {
                        if (emergency.status.toString().equals("PENDING")) {
                            tempEmergencyList.add(emergency);
                        }
                    } else if (statusOption == 2) {
                        if (emergency.status.toString().equals("RESOLVED")) {
                            tempEmergencyList.add(emergency);
                        }
                    }
                }

                if (tempEmergencyList.size() == 0) { //ensure that data has matched the filter we want to display the report with
                    System.out.println("No emergencies found for the specified status. Please try again!");
                } else {
                    displayheaders();
                    for (Emergency tempEmergency: tempEmergencyList) {
                        tempEmergency.displayEmergencyDetails();
                    }
                }
                break;
            case 4:
                System.out.println("returning to main menu...");
                break;
            default:
                System.out.println("Please try again: the choice which was specified is invalid! Enter 1-4 only");
            }
            return;
        }

        System.out.println("There are currently no emergencies in the system! Please record an emergency first.");
    }

    /** Adds emergency to the global list of emergencies
     * @param emergencyIn
     */
    static void addEmergencyToList(Emergency emergencyIn) {
        emergencies.emergencyList.add(emergencyIn);
    }

    /** Read saved data from csv file
     */
    static void retrieveExistingEmergencyData() {
        FileManager.readFromFile("Emergencies.csv", emergencies);
    }

    /** Add extra required services to an emergecny that needs more that one service to handle the raised emergency
     * @param serviceOption
     * @param emergencyToUpdate
     */
    static void addExtraServices(int serviceOption, Emergency emergencyToUpdate) {
        try {
            switch (serviceOption) {
            case 1:
                emergencyToUpdate.fireBrigade = true;
                break;
            case 2:
                emergencyToUpdate.police = true;
                break;
            case 3:
                emergencyToUpdate.ambulance = true;
                break;
            default:
                System.out.println("The service you have chosen isn't valid. Please try again...");
            }
        } catch (NullPointerException e) {
            System.out.println("The emergency id you have specified doesn't exist please try again entering a valid id!");
            return;
        }
    }

    /** Filters our global emergency list by a specific service to aid report generation
     * @param serviceOption
     * @return the new filtered list of emergencies
     */
    static CopyOnWriteArrayList<Emergency> filterByService(int serviceOption) {
        CopyOnWriteArrayList<Emergency> filteredServiceList = new CopyOnWriteArrayList<Emergency>();
        for (Emergency emergency: emergencies.emergencyList) {
            switch (serviceOption) {
            case 1:
                if (emergency.fireBrigade == true) {
                    filteredServiceList.add(emergency);
                }
                break;
            case 2:
                if (emergency.police == true) {
                    filteredServiceList.add(emergency);
                }
                break;
            case 3:
                if (emergency.ambulance == true) {
                    filteredServiceList.add(emergency);
                }
                break;               
            }
        }
        return filteredServiceList;
    }

    /** Saves current state of emergency data records in the system
     *  loads to csv for retrieval upon next execution of program
     */
    static void saveAndQuit() {
        System.out.println("<---Saving and quitting--->");
        System.out.println();
        // write current state information to file, whether complete or not write regardless
        
        FileManager.writeToFile("Emergencies.csv", emergencies);
    }

    /** user friendky terminal formatting for display report function
     */
    static void displayheaders() {
        System.out.printf("%-5s %-20s %-15s %-18s %-20s %-9s %-23s %-8s %-20s\n",
            "ID,",
            "FireBrigadeRequired,",
            "PoliceRequired,",
            "AmbulanceRequired,",
            "Description,",
            "Location,",
            "DateRaised,",
            "Status,",
            "CallerDetails"
        );
    }

    /** dynamic auto incremental 'id' generation logic
     *  This allows users to avoid having entering the same id accidentally for diffrent emergencies
     * @return the newly generated id for the emergency that is currently being recorded
     */
    static int setEmergencyId() {
        if (emergencies.emergencyList.size() > 0) {
            return emergencies.emergencyList.get(emergencies.emergencyList.size() -1).id + 1;
        }

        return 1;
    }
}
